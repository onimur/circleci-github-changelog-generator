version: 2.1

orbs:
  orb-tools: circleci/orb-tools@9.1.0
  queue: eddiewebb/queue@1.5.0
  changelog: onimur/github-changelog-generator@2.1.5
  mem: circleci/rememborb@0.0.1
  # add your orb below, to be used in integration tests (note: a
  # @dev:alpha release must exist; if none exists, you'll need to
  # publish manually once before this worklow can succeed)
  github-changelog-generator: onimur/github-changelog-generator@<<pipeline.parameters.dev-orb-version>>

orb_integration: &orb_integration
  [
    integration-tests-for-changelog-commands,
    github-changelog-generator/changelog-custom,
    check-artifacts-without-checkout,
    check-artifacts-with-checkout
  ]

# Pipeline parameters
parameters:
  # These pipeline parameters are required by the "trigger-integration-tests-workflow"
  # job, by default.
  run-integration-tests:
    type: boolean
    default: false
  dev-orb-version:
    type: string
    default: "dev:alpha"

commands:
  export-env-var:
    steps:
      - mem/remember:
          env_var: DATE_FORMAT
          value: "%d-%m-%y"
      - mem/remember:
          env_var: OUTPUT_CHANGELOG
          value: CHANGELOG.md

jobs:
  integration-tests-for-changelog-commands:
    docker:
       - image: circleci/ruby:latest
    executor: orb-tools/ubuntu

    steps:
      - export-env-var
      - checkout
      # Test your orb e.g.
      - github-changelog-generator/git-checkout
      - mem/recall:
          env_var: DATE_FORMAT
      - run:
          name: Create artifacts folder
          command: |
            mkdir -p artifacts
      - run:
          name: Export env-var
          command: |
            echo 'export OUTPUT_FILE="./artifacts/CHANGELOG-TEST-DEFAULT.md"' >> $BASH_ENV
      - github-changelog-generator/changelog:
          user: CIRCLE_PROJECT_USERNAME
          project: CIRCLE_PROJECT_REPONAME
          token: GITHUB_TOKEN
          date-format: ${DATE_FORMAT}
          output: ${OUTPUT_FILE}
      - github-changelog-generator/persist-to-dir:
          file-or-dir: ${OUTPUT_FILE}
          store-artifacts: true
      - run:
          name: Create artifacts folder
          command: |
            find -iname 'github-changelog-logger.log' -exec cp {} ./artifacts/ \;
      - github-changelog-generator/git-push:
          user: CIRCLE_PROJECT_USERNAME
          project: CIRCLE_PROJECT_REPONAME
          token: GITHUB_TOKEN
          output: ${OUTPUT_FILE}
      - store_artifacts:
          path: ./artifacts

  #publish on github releases
  publish-github-release:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - export-env-var
      - checkout
      - mem/recall:
          env_var: DATE_FORMAT
      - mem/recall:
          env_var: OUTPUT_CHANGELOG
      - run:
          name: Publish Release on GitHub
          command: |
            DATE=$(date +${DATE_FORMAT})
            TAG_WITHOUT_DOT="${CIRCLE_TAG//./}"
            TITLE="CircleCI Github Changelog Generator"
            URL_CHANGELOG="https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/blob/master/${OUTPUT_CHANGELOG}#${TAG_WITHOUT_DOT}-${DATE}"
            printf -v BODY "$(<./docs/RELEASE_TEMPLATE.md)" \
            "${TITLE}" "${DATE}" "${CIRCLE_TAG}" "${CIRCLE_BUILD_NUM}" "${CIRCLE_BUILD_URL}" "${OUTPUT_CHANGELOG}" "${URL_CHANGELOG}"
            ghr \
            -t ${GITHUB_TOKEN} \
            -u ${CIRCLE_PROJECT_USERNAME} \
            -r ${CIRCLE_PROJECT_REPONAME}  \
            -b "${BODY}" \
            -c ${CIRCLE_SHA1}  \
            -delete ${CIRCLE_TAG}

  check-artifacts-without-checkout:
    machine: true
    steps:
      - attach_workspace:
          at: /tmp/automate/temp
      - run: find .
      - attach_workspace:
          at: tmp/automate/
      - run: find .
      - attach_workspace:
          at: ~/tmp/automate/
      - run: find .
      - attach_workspace:
          at: /tmp/automate
      - run: find .

  check-artifacts-with-checkout:
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/automate/temp
      - run: find .

orb_promotion_filters: &orb_promotion_filters
  branches:
    ignore: /.*/
  tags:
    only: /^(major|minor|patch)-release-v\d+\.\d+\.\d+$/

workflows:
  lint_pack-validate_publish-dev:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - orb-tools/lint

      - orb-tools/shellcheck:
          exclude: "SC2002,SC1073,SC1009"

      - orb-tools/pack:
          source-dir: src
          destination-orb-path: orb.yml
          workspace-path: orb.yml
          artifact-path: orb.yml
          requires: [orb-tools/lint]

      - orb-tools/publish-dev:
          context: main-context
          orb-name: onimur/github-changelog-generator
          requires: [orb-tools/pack]

      - queue/block_workflow:
          context: main-context
          circleci-api-key: CIRCLE_TOKEN
          requires: [orb-tools/publish-dev]

      - orb-tools/trigger-integration-tests-workflow:
          name: trigger-integration
          context: main-context
          requires: [queue/block_workflow]

  integration_tests-prod_deploy:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      # Run my ORB Commands and Jobs
      - integration-tests-for-changelog-commands:
          context: main-context
      - github-changelog-generator/changelog-custom:
          context: main-context
          steps:
            - checkout
          output: CHANGELOG_JOB.md
      - check-artifacts-without-checkout:
          requires: [github-changelog-generator/changelog-custom]
      - check-artifacts-with-checkout:
          requires: [github-changelog-generator/changelog-custom]

      # Actually publish the orb
      # Promote a dev version of an orb to a semantic production release.
      # It assumes the context of a GitHub pull request, and promotion of the orb to a
      # new major/minor/patch version is based on information that must be contained in the
      # subject of the commit that merges the pull request. Namely, the commit subject must
      # include the `[semver:FOO]` pattern, where FOO is major, minor, patch, or skip (to skip promotion).
      # e.g. 'Merge pull request #XX from some-branch [semver:minor]'
      # This job is designed to run at the conclusion of an integration-testing workflow.
      - orb-tools/dev-promote-prod-from-commit-subject:
          name: dev-promote-semver
          add-pr-comment: true
          fail-if-semver-not-indicated: false
          bot-user: onimurCI-bot
          bot-token-variable: GITHUB_TOKEN
          context: main-context
          orb-name: onimur/github-changelog-generator
          publish-version-tag: true
          requires: *orb_integration
          filters:
            branches:
              only: master

  # Tag-triggered workflow to promote a dev orb into production.
  #
  # Uses the CLI to promote a dev version of an orb to the registry.
  # This command supports Semantic Versioning support.
  # Whether the new release of the orb will be a patch, minor or major release
  # is determined based on the information in the commit's git tag which
  # must match the regex pattern defined in the major-release-tag-regex,
  # minor-release-tag-regex and patch-release-tag-regex parameters.
  # Hence this job should be configured with an "only" tag filter suitable
  # for the above 3 patterns (e.g. /^(major|minor|patch)-release-v\d+\.\d+\.\d+$/
  # would fit the default patterns) and a branch filter set to ignore /.*/
  tag-triggered-orb-publishing:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - hold-for-approval:
          type: approval
          filters: *orb_promotion_filters
      - orb-tools/dev-promote-prod-from-git-tag:
          orb-name: onimur/github-changelog-generator
          context: main-context
          add-pr-comment: true
          bot-user: onimurCI-bot
          bot-token-variable: GITHUB_TOKEN
          requires: [hold-for-approval]
          filters: *orb_promotion_filters
      - publish-github-release:
          context: main-context
          requires: [orb-tools/dev-promote-prod-from-git-tag]
          filters: *orb_promotion_filters
      - changelog/changelog-custom:
          context: main-context
          steps:
            - checkout
            - export-env-var
            - mem/recall:
                env_var: DATE_FORMAT
            - mem/recall:
                env_var: OUTPUT_CHANGELOG
          user: CIRCLE_PROJECT_USERNAME
          project: CIRCLE_PROJECT_REPONAME
          token: GITHUB_TOKEN
          date-format: ${DATE_FORMAT}
          output: ${OUTPUT_CHANGELOG}
          git-push: true
          filters: *orb_promotion_filters
          requires: [publish-github-release]
